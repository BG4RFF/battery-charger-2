

#include "driverlib.h"
#include "LCD.h"


uint8_t RXData = 0;
uint8_t TXData = 0;

uint8_t received = 0;
uint8_t transmitted = 0;

void main(void)
{
    volatile uint16_t i;

    //Stop watchdog timer
    WDT_A_hold(WDT_A_BASE);

    //Set P1.0 as an output pin.
    /*

     * Select Port 1
     * Set Pin 0 as output
     */
    GPIO_setAsOutputPin(
        GPIO_PORT_P1,
        GPIO_PIN0
        );
    //Set P1.0 as Output Low.
    /*

     * Select Port 1
     * Set Pin 0 to output Low.
     */
    GPIO_setOutputHighOnPin(
        GPIO_PORT_P1,
        GPIO_PIN0
        );

    // Configure Pins for LFXIN
    //Set PJ.4 and PJ.5 as Primary Module Function Input.
    /*

     * Select Port J
     * Set Pin 4, 5 to input Primary Module Function, (LFXIN).
     */
    GPIO_setAsPeripheralModuleFunctionInputPin(
        GPIO_PORT_PJ,
        GPIO_PIN4 + GPIO_PIN5,
        GPIO_PRIMARY_MODULE_FUNCTION
        );

    //Set external frequency for XT1
    CS_setExternalClockSource(32728,0);
    //Set DCO frequency to max DCO setting
    CS_setDCOFreq(CS_DCORSEL_0,CS_DCOFSEL_3);
    //Select XT1 as the clock source for ACLK with no frequency divider
    CS_initClockSignal(CS_ACLK,CS_LFXTCLK_SELECT,CS_CLOCK_DIVIDER_1);
    //Start XT1 with no time out
    CS_turnOnLFXT(CS_LFXT_DRIVE_0);

    // Configure SPI pins
    // Configure Pins for UCB0CLK

    /*

     * Select Port 1
     * Set Pin 4 to input Secondary Module Function, (UCB0CLK).
     */
    GPIO_setAsPeripheralModuleFunctionInputPin(
        GPIO_PORT_P1,
        GPIO_PIN4,
        GPIO_PRIMARY_MODULE_FUNCTION
        );
    // Configure Pins for UCB0TXD/UCB0SIMO, UCB0RXD/UCB0SOMI
    //Set P1.6, P1.7 as Secondary Module Function Input.
    /*

     * Select Port 1
     * Set Pin 6, 7 to input Secondary Module Function, (UCB0TXD/UCB0SIMO, UCB0RXD/UCB0SOMI).
     */
    GPIO_setAsPeripheralModuleFunctionInputPin(
        GPIO_PORT_P1,
        GPIO_PIN6 + GPIO_PIN7,
        GPIO_PRIMARY_MODULE_FUNCTION
        );

    /*
     * Disable the GPIO power-on default high-impedance mode to activate
     * previously configured port settings
     */
    PMM_unlockLPM5();

    //Initialize Master
    EUSCI_B_SPI_initMasterParam param = {0};
    param.selectClockSource = EUSCI_B_SPI_CLOCKSOURCE_ACLK;
    param.clockSourceFrequency = CS_getACLK();
    param.desiredSpiClock = 500000;
    param.msbFirst = EUSCI_B_SPI_MSB_FIRST;
    param.clockPhase = EUSCI_B_SPI_PHASE_DATA_CHANGED_ONFIRST_CAPTURED_ON_NEXT;
    param.clockPolarity = EUSCI_B_SPI_CLOCKPOLARITY_INACTIVITY_HIGH;
    param.spiMode = EUSCI_B_SPI_3PIN;
    EUSCI_B_SPI_initMaster(EUSCI_B0_BASE, &param);

    //Enable SPI module
    EUSCI_B_SPI_enable(EUSCI_B0_BASE);

    EUSCI_B_SPI_clearInterrupt(EUSCI_B0_BASE,
                               EUSCI_B_SPI_RECEIVE_INTERRUPT
                               );

    // Enable USCI_B0 RX interrupt
    EUSCI_B_SPI_enableInterrupt(EUSCI_B0_BASE,
                                EUSCI_B_SPI_RECEIVE_INTERRUPT);

    //Wait for slave to initialize
    __delay_cycles(100);
    LCDInit(0);
    TXData = 0x1;                             // Holds TX data

    ////////////////////////////////////////////////////
        /* Select Port 1
     * Set Pin 5 to input Secondary Module Function, (UCA0CLK).
     */
    GPIO_setAsPeripheralModuleFunctionInputPin(
        GPIO_PORT_P1,
        GPIO_PIN5,
        GPIO_SECONDARY_MODULE_FUNCTION
        );
    // Configure Pins for UCA0TXD/UCA0SIMO, UCA0RXD/UCA0SOMI
    //Set P2.0, P2.1 as Secondary Module Function Input.
    /*

     * Select Port 2
     * Set Pin 0, 1 to input Secondary Module Function, (UCA0TXD/UCA0SIMO, UCA0RXD/UCA0SOMI).
     */
    GPIO_setAsPeripheralModuleFunctionInputPin(
        GPIO_PORT_P2,
        GPIO_PIN0 + GPIO_PIN1,
        GPIO_PRIMARY_MODULE_FUNCTION
        );

    /*
     * Disable the GPIO power-on default high-impedance mode to activate
     * previously configured port settings
     */
    PMM_unlockLPM5();

    //Initialize Master
    EUSCI_A_SPI_initSlaveParam param1 = {0};
    param1.msbFirst = EUSCI_A_SPI_MSB_FIRST;
    param1.clockPhase = EUSCI_A_SPI_PHASE_DATA_CHANGED_ONFIRST_CAPTURED_ON_NEXT;
    param1.clockPolarity = EUSCI_A_SPI_CLOCKPOLARITY_INACTIVITY_HIGH;
    param1.spiMode = EUSCI_A_SPI_3PIN;
    EUSCI_A_SPI_initSlave(EUSCI_A0_BASE, &param1);

    //Enable SPI module
    EUSCI_A_SPI_enable(EUSCI_A0_BASE);

    //Clear receive interrupt flag
    EUSCI_A_SPI_clearInterrupt(EUSCI_A0_BASE,
                               EUSCI_A_SPI_RECEIVE_INTERRUPT
                               );

    // Enable USCI_A0 RX interrupt
    EUSCI_A_SPI_enableInterrupt(EUSCI_A0_BASE,
                                EUSCI_A_SPI_RECEIVE_INTERRUPT);

    //Wait for slave to initialize
    __delay_cycles(100);

    transmitted = 0x1;                             // Holds TX data

    
    
    
    
    
    
    ////////////////////////////////////////////////////////
    //USCI_B0 TX buffer ready?
    while(!EUSCI_B_SPI_getInterruptStatus(EUSCI_B0_BASE,
                                          EUSCI_B_SPI_TRANSMIT_INTERRUPT))
    {
        ;
    }

    //Transmit Data to slave
   EUSCI_B_SPI_transmitData(EUSCI_B0_BASE, TXData);

    __bis_SR_register( GIE);      // CPU off, enable interrupts
   // __no_operation();                       // Remain in LPM0
    
     while(!EUSCI_A_SPI_getInterruptStatus(EUSCI_A0_BASE,
                                          EUSCI_A_SPI_TRANSMIT_INTERRUPT))
    {
        ;
    }

    //Transmit Data to slave
  EUSCI_A_SPI_transmitData(EUSCI_A0_BASE, transmitted);
 
    
}

#if defined(__TI_COMPILER_VERSION__) || defined(__IAR_SYSTEMS_ICC__)
#pragma vector=USCI_B0_VECTOR
__interrupt
#elif defined(__GNUC__)
__attribute__((interrupt(USCI_B0_VECTOR)))
#endif
void USCI_B0_ISR(void)
{
    switch(__even_in_range(UCB0IV,4))
    {
    //Vector 2 - RXIFG
    case 2:
        //USCI_B0 TX buffer ready?
        /*while(!EUSCI_B_SPI_getInterruptStatus(EUSCI_B0_BASE,
                                              EUSCI_B_SPI_TRANSMIT_INTERRUPT))
        {
            ;
        }*/

        RXData = EUSCI_B_SPI_receiveData(EUSCI_B0_BASE);
        LCDWriteIntXY(0,0,TXData,3);
       // LCDWriteIntXY(0,1,RXData,3);
        
        
        
        //Increment data
        TXData++;

        //Send next value
      EUSCI_B_SPI_transmitData(EUSCI_B0_BASE,
                                 TXData
                                );

        //Delay between transmissions for slave to process information
        __delay_cycles(40);

        break;
    default: break;
    }
}




#if defined(__TI_COMPILER_VERSION__) || defined(__IAR_SYSTEMS_ICC__)
#pragma vector=USCI_A0_VECTOR
__interrupt
#elif defined(__GNUC__)
__attribute__((interrupt(USCI_A0_VECTOR)))
#endif
void USCI_A0_ISR(void)
{
    switch(__even_in_range(UCA0IV,4))
    {
    //Vector 2 - RXIFG
    case 2:
        //USCI_A0 TX buffer ready?
       /* while(!EUSCI_A_SPI_getInterruptStatus(EUSCI_A0_BASE,
                                              EUSCI_A_SPI_TRANSMIT_INTERRUPT))
        {
            ;
        }*/

        received = EUSCI_A_SPI_receiveData(EUSCI_A0_BASE);
       // LCDWriteIntXY(5,0,transmitted,3);
        LCDWriteIntXY(5,1,received,3);
        //Increment data
        transmitted++;

        //Send next value
        EUSCI_A_SPI_transmitData(EUSCI_A0_BASE,
                                transmitted
                                );

        //Delay between transmissions for slave to process information
        __delay_cycles(40);

        break;
    default: break;
    }
}
