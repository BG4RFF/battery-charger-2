#include <driverlib.h>
#include <LCD.h>


#define TIMER_A_PERIOD 500
#define DUTY_CYCLE  250

int display_float(float x)
{
  int y=x;
  x=x*100;
  y=y*100;
  int c=x-y;
}




uint16_t i=0;
float Adc_Value=0;
uint16_t Adc_Value1=0;

int main(void) {
  
  
   // Stop watchdog timer
    WDT_A_hold(WDT_A_BASE);
    
    PMM_unlockLPM5();
  ///////////////////PWM configuration///////////////////////////
     GPIO_setAsPeripheralModuleFunctionOutputPin(
        GPIO_PORT_P1,
        GPIO_PIN3,
        GPIO_PRIMARY_MODULE_FUNCTION
        );

   

    //Generate PWM - Timer runs in Up-Down mode
    Timer_A_outputPWMParam param = {0};
    param.clockSource = TIMER_A_CLOCKSOURCE_SMCLK;
    param.clockSourceDivider = TIMER_A_CLOCKSOURCE_DIVIDER_1;
    param.timerPeriod = TIMER_A_PERIOD;
    param.compareRegister = TIMER_A_CAPTURECOMPARE_REGISTER_2;
    param.compareOutputMode = TIMER_A_OUTPUTMODE_RESET_SET;
   param.dutyCycle = DUTY_CYCLE;
    Timer_A_outputPWM(TIMER_A1_BASE, &param);

    //Enter LPM0
   // __bis_SR_register(LPM0_bits);
    
    
    
    
    
    //////////////////////PWM conf. end///////////////////////////////

     //for S1 switch
    //Enable  P1.1 internal resistance as pull-Up resistance
    GPIO_setAsInputPinWithPullUpResistor(
        GPIO_PORT_P1,
        GPIO_PIN1
        );

    //P1.1 Hi/Lo edge
   GPIO_selectInterruptEdge(
       GPIO_PORT_P1,
       GPIO_PIN1,
       GPIO_HIGH_TO_LOW_TRANSITION
       );

    
    
//**************ADC12_B*************************//
 /* Select Port 1
    * Set Pin 8.4 to output (or Input I/O x) Ternary Module Function, (A7, C7).
    */
    GPIO_setAsPeripheralModuleFunctionOutputPin(
    	GPIO_PORT_P8,
    	GPIO_PIN4,
    	GPIO_TERNARY_MODULE_FUNCTION
    );
     /* Select Port 1
    * Set Pin 8.6 to output (or Input I/O x) Ternary Module Function, (A5, C7).
    */
    GPIO_setAsPeripheralModuleFunctionOutputPin(
    	GPIO_PORT_P8,
    	GPIO_PIN6,
    	GPIO_TERNARY_MODULE_FUNCTION
    );
  
     //Initialize the ADC12B Module
    /*
    * Base address of ADC12B Module
    * Use internal ADC12B bit as sample/hold signal to start conversion
    * USE MODOSC 5MHZ Digital Oscillator as clock source
    * Use default clock divider/pre-divider of 1
    * Not use internal channel
    */
   	ADC12_B_initParam initParam = {0};
    initParam.sampleHoldSignalSourceSelect = ADC12_B_SAMPLEHOLDSOURCE_SC;
    initParam.clockSourceSelect = ADC12_B_CLOCKSOURCE_ADC12OSC;
    initParam.clockSourceDivider = ADC12_B_CLOCKDIVIDER_1;
    initParam.clockSourcePredivider = ADC12_B_CLOCKPREDIVIDER__1;
    initParam.internalChannelMap = ADC12_B_NOINTCH;
	ADC12_B_init(ADC12_B_BASE, &initParam);

    //Enable the ADC12B module
    ADC12_B_enable(ADC12_B_BASE);
    
     /*
    * Base address of ADC12B Module
    * For memory buffers 0-7 sample/hold for 64 clock cycles
    * For memory buffers 8-15 sample/hold for 4 clock cycles (default)
    * Disable Multiple Sampling
    */
    ADC12_B_setupSamplingTimer(ADC12_B_BASE,
      ADC12_B_CYCLEHOLD_16_CYCLES,
      ADC12_B_CYCLEHOLD_4_CYCLES,
      ADC12_B_MULTIPLESAMPLESDISABLE);

    //Configure Memory Buffer for A7
    /*
    * Base address of the ADC12B Module
    * Configure memory buffer 0
    * Map input A7 to memory buffer 0
    * Vref+ = AVcc
    * Vref- = AVss
    * Memory buffer 0 is not the end of a sequence
    */
    ADC12_B_configureMemoryParam configureMemoryParam = {0};
    configureMemoryParam.memoryBufferControlIndex = ADC12_B_MEMORY_1;
    configureMemoryParam.inputSourceSelect = ADC12_B_INPUT_A5;
    configureMemoryParam.refVoltageSourceSelect = ADC12_B_VREFPOS_AVCC_VREFNEG_VSS;
    configureMemoryParam.endOfSequence = ADC12_B_ENDOFSEQUENCE;
    configureMemoryParam.windowComparatorSelect = ADC12_B_WINDOW_COMPARATOR_DISABLE;
    configureMemoryParam.differentialModeSelect = ADC12_B_DIFFERENTIAL_MODE_DISABLE;
    ADC12_B_configureMemory(ADC12_B_BASE, &configureMemoryParam);

 //Configure Memory Buffer for A5
    /*
    * Base address of the ADC12B Module
    * Configure memory buffer 1
    * Map input A6 to memory buffer 1
    * Vref+ = AVcc
    * Vref- = AVss
    * Memory buffer 0 is not the end of a sequence
    */
    ADC12_B_configureMemoryParam configureMemoryParam1 = {0};
    configureMemoryParam1.memoryBufferControlIndex = ADC12_B_MEMORY_0;
    configureMemoryParam1.inputSourceSelect = ADC12_B_INPUT_A7;
    configureMemoryParam1.refVoltageSourceSelect = ADC12_B_VREFPOS_AVCC_VREFNEG_VSS;
    configureMemoryParam1.endOfSequence = ADC12_B_NOTENDOFSEQUENCE;
    configureMemoryParam1.windowComparatorSelect = ADC12_B_WINDOW_COMPARATOR_DISABLE;
    configureMemoryParam1.differentialModeSelect = ADC12_B_DIFFERENTIAL_MODE_DISABLE;
   ADC12_B_configureMemory(ADC12_B_BASE, &configureMemoryParam1);

    
 ///////////////ADC////////////////////////    
 float temp=0;
 int c=0;
 int b=0;
    LCDInit(LS_NONE);
    while(1)
    {
        
       
        if (GPIO_getInputPinValue (GPIO_PORT_P1, GPIO_PIN1)) 
        {
         
          LCDClear();
          
            LCDWriteIntXY(0,0,Adc_Value,4);
            
            LCDWriteIntXY(0,1,Adc_Value1,4);
            
            
          for(i=0;i<10000;i++);
          
        }
        else
        {
          LCDClear();
         LCDWriteFStringXY(0,0,"press p1.1 for");
         LCDWriteFStringXY(0,1,"ADC");
         for(i=0;i<10000;i++);
        }

        // Delay
        for(i=10000; i>0; i--);
        
       ADC12_B_startConversion(ADC12_B_BASE, 1, ADC12_B_REPEATED_SEQOFCHANNELS); 
        ADC12_B_startConversion(ADC12_B_BASE, 0, ADC12_B_REPEATED_SEQOFCHANNELS); 
        
        
   Adc_Value=ADC12_B_getResults(ADC12_B_BASE, ADC12_B_MEMORY_0);
  
     
   Adc_Value1=ADC12_B_getResults(ADC12_B_BASE, ADC12_B_MEMORY_1);
    } //End of while loop 
}